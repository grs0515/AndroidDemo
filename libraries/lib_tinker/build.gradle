apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.android.compileSdkVersion
    buildToolsVersion rootProject.android.buildToolsVersion


    defaultConfig {
        minSdkVersion rootProject.android.minSdkVersion
        targetSdkVersion rootProject.android.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        /**
         * you can use multiDex and install it in your ApplicationLifeCycle implement
         */
        multiDexEnabled true
        /**
         * buildConfig can change during patch!
         * we can use the newly value when patch
         */
        buildConfigField "String", "MESSAGE", "\"I am the base apk\""
//        buildConfigField "String", "MESSAGE", "\"I am the patch apk\""
        /**
         * client version would update with patch
         * so we can get the newly git version easily!
         */
        buildConfigField "String", "TINKER_ID", "\"1.0.0\""
        buildConfigField "String", "PLATFORM", "\"all\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
//    repositories {
//        flatDir {
//            dirs 'libs'
//        }
//    }

}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar','*.aar'])

    api("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
    //okttp依赖

    // Maven local cannot handle transist dependencies.
    api("com.tencent.tinker:tinker-android-loader:${TINKER_VERSION}") {
        changing = true
    }

    annotationProcessor("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") {
        changing = true
    }
    compileOnly("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }

//    api(name: 'xutils-3.1.2', ext: 'aar')
//    implementation (name: 'xutils-3.1.2', ext: 'aar')
}

