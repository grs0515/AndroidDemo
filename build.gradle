apply from: "config.gradle"
//这里是gradle脚本执行所需依赖，分别是对应的maven库和插件
buildscript {
    //配置远程仓库
    repositories {
        //从Android Studio3.0后新增了google()配置
        google()
        //是一个类似于github的代码托管仓库，声明了jcenter()配置，可以轻松引用 jcenter上的开源项目
        jcenter()
    }
    //配置构建工具 声明Android gradle plugin的版本
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        //Tencent热修复tinker
        classpath("com.tencent.tinker:tinker-patch-gradle-plugin:${TINKER_VERSION}") {
            changing = TINKER_VERSION?.endsWith("-SNAPSHOT")
            exclude group: 'com.android.tools.build', module: 'gradle'
        }
    }
}
//声明了所有project默认的仓库源
allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url "https://jitpack.io" }
    }
}
// 运行gradle clean时，执行此处定义的task任务。
// 该任务继承自Delete，删除根目录中的build目录。
// 相当于执行Delete.delete(rootProject.buildDir)。
task clean(type: Delete) {
    delete rootProject.buildDir
}
//project构建最后执行
task doLast() {
    println "------project  doLast"
}

ext {
    local = 'Hello from build.gradle'
}
//执行 gradle printProperties -Pcmd='Hello from the command line'
task printProperties(){
    println rootProject.ext.local // 本地extra变量
    println propertiesFile // 本地properties文件中变量
    if (project.hasProperty('cmd')) {
        println cmd // 命令行输入的变量
    }
    //输入结果:
    // Hello from build.gradle
    // Hello from gradle.properties
    // Hello from the command line
}