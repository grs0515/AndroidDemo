apply plugin: 'com.android.application'
//引入插件
//apply plugin: 'com.tencent.tinker.patch'
//configurations { all*.exclude group: 'com.android.support', module: 'support-v4' }
//configurations { all*.exclude group: 'com.android.support', module: 'support-annotations' }
dependencies {

    api 'com.bigkoo:convenientbanner:2.0.4'
    api 'io.reactivex:rxandroid:1.1.0'
    api 'io.reactivex:rxjava:1.1.0'
    api 'com.squareup.retrofit2:retrofit:2.0.0-beta4'
    api 'com.squareup.retrofit2:converter-gson:2.0.0-beta4'
    api 'com.squareup.retrofit2:adapter-rxjava:2.0.0-beta4'
    api 'com.github.bumptech.glide:glide:3.7.0'
    api 'com.alipay.euler:andfix:0.5.0@aar'
    api 'com.squareup.picasso:picasso:2.5.2'
    api 'tv.danmaku.ijk.media:ijkplayer-java:0.6.0'
    api 'tv.danmaku.ijk.media:ijkplayer-armv7a:0.6.0'
    api 'com.jakewharton:butterknife:7.0.0'
    //base
    api project(':baselib')
    //阿里ARouter
    annotationProcessor rootProject.ext.dependencies["arouter_compiler"]
    //腾讯热修复
    //optional, help to generate the final application
//    compileOnly 'com.tencent.tinker:tinker-android-anno:1.9.1'
    //tinker's main Android lib
//    implementation 'com.tencent.tinker:tinker-android-lib:1.9.1'

    //依赖
    api project(':libraries:vitamio')
    api project(':libraries:xutils')
    api project(':libraries:autolayout')
    api project(':libraries:vrlib')
    api project(':libraries:pulltorefresh')
    api project(':libraries:adapter')
    api files('libs/AMap_Location_v1.4.1_20150917.jar')
    api files('libs/umeng-analytics-v5.6.4.jar')

    api files('libs/mpchartlib.jar')
    //图表
    api files('libs/Msc.jar')

    api files('libs/nineoldandroids-2.4.0.jar')


}

android {
    //版本和默认配置
    compileSdkVersion rootProject.android.compileSdkVersion
    buildToolsVersion rootProject.android.buildToolsVersion

    defaultConfig {
        applicationId "com.grs.demo"
        minSdkVersion rootProject.android.minSdkVersion
        targetSdkVersion rootProject.android.targetSdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        //flavor dimension 它的维度就是该版本号，这样维度就是都是统一的了
        flavorDimensions "versionCode"
        //添加如下配置就OK了
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
        //采用新的Jack(Java Android Compiler Kit)编译
//        jackOptions {
//            enabled true
//        }
        //阿里路由- 每个module都添加
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }
    //签名配置
    signingConfigs {
        config {
            storeFile file('cmcckeystore')
            storePassword 'cmcc1234'
            keyAlias 'cmcckeystore'
            keyPassword 'cmcc1234'
        }
    }
    //
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            jniLibs.srcDirs = ['libs']
            assets.srcDirs = ['assets']
            jni.srcDirs = ['src/main/jni', 'src/main/jni/']
        }
    }
    packagingOptions { // 打包配置
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE' // 排除一些文件
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
    //这个是解决lint报错的代码
    lintOptions {
        abortOnError false
    }
    //解决MultiDex导致 Out of memory
    dexOptions {
//        incremental true
//        jumboMode = true
        javaMaxHeapSize "2g"
    }
    //多渠道打包(赋值给AndroidManifest):生成不同IP
    productFlavors {
        formal {
            manifestPlaceholders = [SERVER_IP: "http://111.44.243.118/"]
        }

        internal {
            manifestPlaceholders = [SERVER_IP: "http://10.2.45.18/"]
        }
        stage {
            manifestPlaceholders = [SERVER_IP: "http://112.54.207.49/"]
        }
    }
//多渠道打包(赋值给AndroidManifest):生成不同应用市场名
//    productFlavors {
//
//        wandoujia {}
//        baidu {}
//        c360 {}
//        uc {}
//
//        productFlavors.all { flavor ->
//            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
//        }
//
//    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dataBinding {
        enabled = true
    }
}
//打包输出apk格式：app-formal/internal/stage-1.0.0-时间.apk
//android.applicationVariants.all { variant ->
//    variant.outputs.each { output ->
//        def outputFile = output.outputFile
//        if (outputFile != null && outputFile.name.endsWith('.apk')) {
//            def releaseApkName = "-" + getVersionNameFromManifest() + "-" + getDate() + '.apk'
//            def fileName = outputFile.name.replace("-release.apk", releaseApkName)
//            output.outputFile = new File(outputFile.parent, fileName)
//        }
//    }
//}
//获取日期格式
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}
//获取清单文件版本名 androidManifest.xml
def getVersionNameFromManifest() {
//    def manifestParser = new com.android.builder.core.DefaultManifestParser()
//    return manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile)
    return ''
}
