apply plugin: 'com.android.application'

//configurations { all*.exclude group: 'com.android.support', module: 'support-v4' }
//configurations { all*.exclude group: 'com.android.support', module: 'support-annotations' }
dependencies {
    compile project(':vitamio')
    compile project(':xutils')
    compile project(':autolayout')
    compile 'com.android.support:multidex:'
    compile files('libs/AMap_Location_v1.4.1_20150917.jar')
    compile files('libs/umeng-analytics-v5.6.4.jar')
    compile 'com.bigkoo:convenientbanner:2.0.4'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.android.support:recyclerview-v7:22.2.1'
    compile 'com.android.support:design:22.2.1'
//    compile project(':recyclerview')
}

android {
    //版本和默认配置
    compileSdkVersion 21
    buildToolsVersion '21.1.2'

    defaultConfig {
        applicationId "com.cmcc.hyapps.KunlunTravel"
        minSdkVersion 15
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }
    //签名配置
    signingConfigs {
        config {
            storeFile file('cmcckeystore')
            storePassword 'cmcc1234'
            keyAlias 'cmcckeystore'
            keyPassword 'cmcc1234'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            jniLibs.srcDirs = ['libs']
        }
    }
    packagingOptions { // 打包配置
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE' // 排除一些文件
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
    //这个是解决lint报错的代码
    lintOptions {
        abortOnError false
    }
    //解决MultiDex导致 Out of memory
    dexOptions {
        incremental true
        jumboMode = true
        javaMaxHeapSize "2g"
    }
    //多渠道打包(赋值给AndroidManifest):生成不同IP
    productFlavors {
        formal {
            manifestPlaceholders = [SERVER_IP: "http://111.44.243.118/"]
        }

        internal {
            manifestPlaceholders = [SERVER_IP: "http://10.2.45.18/"]
        }
        stage {
            manifestPlaceholders = [SERVER_IP: "http://112.54.207.49/"]
        }
    }
//多渠道打包(赋值给AndroidManifest):生成不同应用市场名
//    productFlavors {
//
//        wandoujia {}
//        baidu {}
//        c360 {}
//        uc {}
//
//        productFlavors.all { flavor ->
//            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
//        }
//
//    }
}
//打包输出apk格式：app-formal/internal/stage-1.0.0-时间.apk
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def outputFile = output.outputFile
        if (outputFile != null && outputFile.name.endsWith('.apk')) {
            def releaseApkName = "-" + getVersionNameFromManifest() + "-" + getDate() + '.apk'
            def fileName = outputFile.name.replace("-release.apk", releaseApkName)
            output.outputFile = new File(outputFile.parent, fileName)
        }
    }
}
//获取日期格式
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}
//获取清单文件版本名 androidManifest.xml
def getVersionNameFromManifest() {
    def manifestParser = new com.android.builder.core.DefaultManifestParser()
    return manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile)
}


